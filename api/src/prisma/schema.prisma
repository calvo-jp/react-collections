generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  name            String
  email           String     @unique
  emailVerifiedAt DateTime?
  avatar          String?
  password        String
  createdAt       DateTime   @default(now()) @db.Timestamptz()
  updatedAt       DateTime   @updatedAt @db.Timestamptz()
  recipes         Recipe[]
  reviews         Review[]
  favorites       Favorite[]

  @@map("users")
}

model Recipe {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  tags         String[]
  ingredients  String[]
  instructions Instruction[]
  avatar       String?
  banner       String?
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int
  createdAt    DateTime      @default(now()) @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @db.Timestamptz()
  reviews      Review[]
  hearts       Favorite[]

  @@map("recipes")
}

model Instruction {
  id          Int      @id @default(autoincrement())
  description String
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int
  image       String?  @unique
  video       String?  @unique
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt @db.Timestamptz()

  @@map("instructions")
}

model Review {
  id        Int      @id @default(autoincrement())
  body      String
  rate      Int
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId  Int?
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  Int
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  @@map("reviews")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  recipe    Recipe?  @relation(fields: [recipeId], references: [id], onDelete: SetNull)
  recipeId  Int?
  createdAt DateTime @default(now()) @db.Timestamptz()

  @@map("favorites")
}
